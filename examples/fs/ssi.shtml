<!DOCTYPE html>
<html lang="en">
<head>
    <title><!--#HNAME--></title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="description" content="hedmanshome.se Marine Water FlowMeter">
    <meta name="author" content="Erland Hedman">
    <meta name="license" content="Free">
    <meta name="version" content="1.2">
    <meta name="license" content="gaugeSVG CPOL 1.0.2">
    <script src="gaugeSVG.js"></script>
    <link rel="icon" href="drop.ico">

    <style>

    html, body {
        min-width: 1024px;
        width: min-content;
        background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#cbccc8)) fixed;
        font-size: 0.98rem;
    }

    html {
        display: table;
        margin: auto;
    }

    body {
        display: table-cell;
        top: 0px !important;
        padding-top: 8px; 
    }

    .content {
        border: 1px solid gray;
        padding: 4px;
        padding-right: 6px;
        padding-left: 6px;
        background: #f2f2f2;
        width: 100%;
    }

    .goog-te-banner-frame.skiptranslate {
        display: none !important;
    }

    .goog-te-gadget-simple {
        position: absolute;
        top: 0px;
        right: 20px;
    }

    .goog-te-gadget-icon {
        display: none;
    }

    #goog-gt-tt, .goog-te-balloon-frame {
        display: none !important;
    } 

    .goog-text-highlight {
        background: none !important; box-shadow: none !important;
    }

    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 3px;
    }

    select {
        width: 140px;
    }

    td:nth-child(1) {
        width: 23%;
    }

    td:nth-child(2) {
        width: 40%;
    }

    input {
        width: 206px;
    }
    
    .theader {
        padding-top: 4px;
        padding-bottom: 4px;
        text-align: left;
        background-color: #04AA6D;
        color: white;
        border: none;
        border-radius: 3px;
    }
    
    tr:hover {
        background-color: #ddd;
    }

    button, checkbox, input, select, number, table {
        font-size: inherit;
        box-sizing: border-box;
        border: 1px solid black;
        background: inherit;
    }

    table {
        border: none;
    }

    select, input, number {
        background: white;
    }

    .tdsTr, .system {
        display : none;
    }

    #tdsDiv {
        border: 1px solid black;
        width: 50%;
        background: white;
        padding: 1px;
        padding-left: 2px;
    }

    #submitButt {
        float: right;
        font-size: inherit;
        background: inherit;
        width: 80px;
        
    }

    #thumbwrap {
	    position:relative; 
    }

    .thumb span { 
        position: absolute;
	    visibility:hidden;
        left: -324px;
        top: -180px;
        border: 1px solid black;

    }

    .thumb:hover, .thumb:hover span { 
	    visibility:visible;
	    z-index:1;
    }

    .buttons:hover {
        background-color: #ddd !important;
    }

    #trButt, #google_translate_element  {
        position:relative;
        float: right;
        font-size: small;
    }

    p, a {
        font-size: 0.9em;
        text-decoration: none; 
        font-family: helvetica, arial, sans-serif;
    }

    .input-group {
        float: left;
        width: auto;
    }

    h3 {
        margin: 6px;
        font-size: inherit;
    }

    #pfCheck {
        width: 50px;
        float: right;
        padding: 0;
        border: none;
        background: inherit;
        visibility: hidden;
    }

    #kvalue {
        width: 50px;
        float: right;
        padding: 0;
        border: none;
        background: inherit;
        visibility: hidden;
    }

    #containerFlrt, #containerTank {
        width:250px; height:200px;
        display: inline-block;
        margin: 1em;
    }

    #containerTds, #containerTemp {
        width:250px; height:200px;
        display: inline-block;
        margin: 1em;
        visibility: hidden;
    }

    .input-group:has(:invalid) { /* has() not supported on firefox 106 */
      border: 2px solid red;
      animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;
      transform: translate3d(0, 0, 0);
    }

    @keyframes shake {
      10%, 90% {
        transform: translate3d(-1px, 0, 0);
      }
      
      20%, 80% {
        transform: translate3d(2px, 0, 0);
      }

      30%, 50%, 70% {
        transform: translate3d(-4px, 0, 0);
      }

      40%, 60% {
        transform: translate3d(4px, 0, 0);
      }
    }

    </style>

    <script>

    var TimerObj;
    const AMonth = 2628288;

    const UrlBase   = 0;
    const UrlKCalUp = 1;
    const UrlKCalDn = 2;
    const UrlQCalup = 3;
    const UrlQCaldn = 4;
    var   UrlIndx   = UrlBase;
    const UrlDest = ["ssi_xml.shtml", "calKUp_xml.shtml", "calKDn_xml.shtml", "calQUp_xml.shtml", "calQDn_xml.shtml"];
    var DoAsynch   = true;

    var GuageBlock = false;

    var UsedVolume  = <!--#TOTV-->;
    var GrandTov    = <!--#GTOTV-->;
    var FilterVol   = <!--#FVOL-->;

    var CurKValue   = <!--#KVAL-->;
    var CurQValue   = <!--#FQV-->;

    function setColor(value, obj)
    {
        var hue = ((1 - value) * 120).toString(10);
        var color = ["hsl(", hue, ",100%,50%)"].join("");

        obj.style.backgroundColor = color;
    }

    function loadXMLDoc() 
    {
        var tdsObj  = document.getElementById("tdsDiv");

        var xhttp = new XMLHttpRequest();

        xhttp.onreadystatechange = function()
        {
            if (this.readyState == 4 && this.status == 200 && UrlIndx == UrlBase)
            {
                var totvObj = document.getElementById("totv");
                var totvPr  = parseFloat(totvObj.value);
                var tnkv    = parseFloat(document.getElementById("tnkv").value);

                parser      = new DOMParser();
                xmlDoc      = parser.parseFromString(this.responseText,"text/xml");
                var flrt    = parseFloat(xmlDoc.getElementsByTagName("flrt")[0].childNodes[0].nodeValue);
                var wtemp   = parseFloat(xmlDoc.getElementsByTagName("temp")[0].childNodes[0].nodeValue);
                var totvPo  = parseFloat(xmlDoc.getElementsByTagName("totv")[0].childNodes[0].nodeValue);
                var tds     = parseInt(xmlDoc.getElementsByTagName("tds")[0].childNodes[0].nodeValue.trim(), 10);

                document.getElementById("kvalue").value = parseFloat(xmlDoc.getElementsByTagName("kvalue")[0].childNodes[0].nodeValue);
                document.getElementById("fqv").value = parseFloat(xmlDoc.getElementsByTagName("qvalue")[0].childNodes[0].nodeValue);

                if (totvPo > totvPr && totvPr <= tnkv && flrt > 0.0) {

                    UsedVolume = totvPr;
                    UsedVolume  += totvPo - totvPr;
                    GrandTov += totvPo - totvPr;
                    FilterVol  += totvPo - totvPr; 

                    document.getElementById("gtotv").value = Math.floor(GrandTov);
                    document.getElementById("fvol").value = Math.floor(FilterVol);
                    totvObj.value = UsedVolume;

                    update_vols();
                    document.getElementById("submitButt").style.visibility = "hidden";

                } else {
                    document.getElementById("submitButt").style.visibility = "visible";
                }

                if (GuageBlock == true) {
                    guageTank.refresh(Math.round(tnkv-UsedVolume), false);
                    guageFlrt.refresh(flrt, true);

                    if (tds > 0) {
                        document.getElementById("containerTds").style.visibility = 'visible';
                        guageTds.refresh(tds, true);
                        if (wtemp > 0.0) {
                            document.getElementById("containerTemp").style.visibility = 'visible';
                            guageTemp.refresh(wtemp, true); 
                        }                 
                    }
                }

                var hostname = xmlDoc.getElementsByTagName("hostname")[0].childNodes[0].nodeValue;
                var time = xmlDoc.getElementsByTagName("time")[0].childNodes[0].nodeValue;

                if (flrt > 0.0) {
                    fl =  "  flowrate now: " + flrt + " L/M";
                    document.getElementById("submitButt").style.visibility = "hidden";
                } else {
                    fl = "";
                    document.getElementById("submitButt").style.visibility = "visible";
                }

                document.getElementById("h3header").innerHTML = hostname + " " + time + fl;
                if (GuageBlock == true) {
                    document.getElementById("h3Guageheader").innerHTML = hostname + " " + time;
                }

                if (tds != 0) {          
                    var cell = document.getElementsByClassName("tdsTr"); 
                    cell[0].style.display = "table-cell";
                    cell[1].style.display = "table-cell";
                    cell[2].style.display = "table-cell";
                    setColor(tds/600, tdsObj);
                    var temp = "";
                    if (wtemp != 0) temp = " @ " + wtemp +"&#8451";

                    tdsObj.innerHTML = tds + "ppm" + temp;
                }
                document.getElementById("uptm").value = xmlDoc.getElementsByTagName("uptm")[0].childNodes[0].nodeValue.trim();

            } else if (this.readyState == 4 && this.status == 200 && UrlIndx > UrlBase)
            {
                UrlIndx = UrlBase;
                DoAsynch = true;
                TimerObj = setInterval(function () {loadXMLDoc();}, 2000);
            }
        };
        xhttp.open("GET", UrlDest[UrlIndx], DoAsynch);
        xhttp.send();
    }

    function updKValue(obj)
    {
        if (obj.value > CurKValue) {
            UrlIndx = UrlKCalUp;
            CurKValue += 0.05;
        } else if (obj.value < CurKValue) {
            UrlIndx = UrlKCalDn;
            CurKValue -= 0.05;
        }
        clearInterval(TimerObj);
        DoAsynch = false;
        loadXMLDoc();
    }

    function updQValue(obj)
    {
        if (obj.value > CurQValue) {
            UrlIndx = UrlQCalup;
            CurQValue += 0.2;
        } else if (obj.value < CurQValue) {
            UrlIndx = UrlQCaldn;
            CurQValue -= 0.2;
        }
        clearInterval(TimerObj);
        DoAsynch = false;
        loadXMLDoc();
    }

    function upd_country(obj)
    {
        if (obj.options[obj.selectedIndex].text == "Select new")
            return;

        document.getElementById("cou").value = obj.options[obj.selectedIndex].value;
    }

    function wifi_sel(obj)
    {
        if (obj.options[obj.selectedIndex].text == "Select ssid")
            return;

        document.getElementById("ssid").value = obj.options[obj.selectedIndex].value;
    }

    function upd_ntp(obj)
    {
        if (obj.options[obj.selectedIndex].text == "Select new")
            return;

        document.getElementById("ntp").value = obj.options[obj.selectedIndex].value;

    }

    function formatDate(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2) 
            month = '0' + month;
        if (day.length < 2) 
            day = '0' + day;

        return [year, month, day].join('-');
    }

    function ToLocalDate (inDate) {

        var date = new Date(0);
        return formatDate(date.setUTCSeconds(inDate));
    }

    function setFdate(obj)
    {
        var obje = document.getElementById("fage");
        var objeval = parseInt(obje.value, 10);
        var curepoch = parseInt(document.getElementById("curepoch").value, 10);
    
        var someDate = new Date(obj.value);
        var epoch = someDate.getTime() / 1000;
     
        obje.value = epoch;                

        if (epoch < curepoch + (AMonth/2)) {
            obj.style.background = "red";
            obj.title = "Expired";
        } else if (epoch < curepoch + AMonth) {
            obj.style.background = "yellow";
            obj.title = "About to expire";
        } else {
            obj.style.background = "white";
            obj.title = "";
        }
    }

    function showPass()
    {
        var obj = document.getElementById("pass");
        if (obj.type === "password") {
            obj.type = "text";
        } else {
            obj.type = "password";
        }
    }

    function validIPmsg(obj, stat)
    {
        if (stat == true) {
            obj.title = "Enter I.P or URL";
            obj.setCustomValidity('');
        } else {
            obj.title = "Garbled NTP Server Address";
            obj.setCustomValidity('Garbled NTP Server Address');
        }

        return stat;
    }

    function isValidIP(obj)
    {
        var address = obj.value;
        var patt = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        var match = address.match(patt);

        if (address == "255.255.255.255") {
            return validIPmsg(obj, false);
        }

        if (match == null) {
            if (! /^[a-zA-Z0-9_.~-]+$/.test(address)) { // valid URL?
                return validIPmsg(obj, false);
            }
        }
           
        return validIPmsg(obj, true);
    }

    function showKvalue(arg)
    {
        document.getElementById("kvalue").style.visibility = arg;
    }

    function showPf(arg)
    {
        document.getElementById("pfCheck").style.visibility = arg;
    }

    function update_vols()
    {
        var totv = parseFloat(document.getElementById("totv").value);
        var tnkv = parseFloat(document.getElementById("tnkv").value);
        if (totv >= tnkv) {          
            document.getElementById("totv").value = totv = tnkv;
        }
        var vleft = Math.round(((tnkv-totv)/tnkv)*100);
        document.getElementById("totv").title = "Volume left " + vleft + "%";
        document.getElementById("tnkv").title = "Volume left " + vleft + "%";
        document.getElementById("remv").title = "Volume left " + vleft + "%";
        document.getElementById("remv").value = Math.round(tnkv - totv);
    }

    function showAll(obj)
    {
        var cell = document.getElementsByClassName("system"); 
        Array.prototype.forEach.call(cell, function(el) {
            el.style.display = "table-cell";
        });
        document.getElementById("showAllspan").style.display = 'none';
        document.getElementById("showLessspan").style.display = 'block';
        obj.checked = false;
    }

    function showLess(obj)
    {
        GuageBlock = false;
        var cell = document.getElementsByClassName("system"); 
        Array.prototype.forEach.call(cell, function(el) {
            el.style.display = "none";
        });
        document.getElementById("showAllspan").style.display = 'block';
        document.getElementById("showLessspan").style.display = 'none';
        obj.checked = false;
    }

    function showDefault(obj)
    {
        GuageBlock = false;
        document.getElementById("showDetailes").style.display = 'block';
        document.getElementById("showGuages").style.display = 'none';
        obj.checked = false;
    }

    function showDash(obj)
    {
        GuageBlock = true;
        document.getElementById("showDetailes").style.display = 'none';
        document.getElementById("showGuages").style.display = 'block';
        document.getElementById("showGuages").style.visibility = 'visible';
        obj.checked = false;
    }

    function init()
    {
        var obje = document.getElementById("fage");
        var objd = document.getElementById("fdate");
        var curepoch = parseInt(document.getElementById("curepoch").value, 10);
        var epoch = parseInt(obje.value, 10);

        objd.value = ToLocalDate(obje.value);
        objd.min = ToLocalDate(curepoch);

        if (epoch < curepoch + (AMonth/2)) {
            objd.style.background = "red";
            objd.title = "Expired";
        } else if (epoch < curepoch + AMonth) {
            objd.style.background = "yellow";
            objd.title = "About to expire";
        } else {
            objd.style.background = "white";
            objd.title = "";
        }

        var ssidArr = document.getElementById("wifiscans").value.split('|');
        var wfs = document.getElementById("wifisel");
        var wfs_option;
        for (var i = 0; i < ssidArr.length; i+=2) {
            wfs_option = document.createElement("option");
            wfs_option.text = wfs_option.value = ssidArr[i];
            wfs_option.title = ssidArr[i+1];
            wfs.add(wfs_option);
            if (ssidArr[i] === "<!--#SSID-->") {
                wfs_option.selected = 'selected';
            }
        }

        var couVal = document.getElementById("cou").value;
        var opt = document.getElementById("couopt");
        for(i=0; i<opt.options.length; i++){
            if (opt.options[i].value === couVal) {
                opt.options[i].selected = 'selected';
                break;
            }
        }

        var ntpObj = document.getElementById("ntp");
        var opt = document.getElementById("ntpopt");

        for(i=0; i<opt.options.length; i++){
            if (opt.options[i].value === ntpObj.value) {
                opt.options[i].selected = 'selected';
                break;
            }
        }

        isValidIP(ntpObj);

        update_vols();

        var netDbg = document.getElementById("net_debug").value;
        if (netDbg !== "false") {
            var uptm = document.getElementById("uptm");
            var msg = "";
            var dbgArr = netDbg.split(',');
            msg += "lostPing=" + dbgArr[0];
            msg += ", outOfPcb=" + dbgArr[1];
            msg += ", rebootCount=" + dbgArr[2];
            msg += ", httpdReq=" + dbgArr[3];
            msg += ", rebootTime=" + ToLocalDate(dbgArr[4]);
            uptm.title = msg;
        }  

        if (document.getElementById("apMode").value === "1") {
            document.getElementById("apmDiv").style.display='block'; 
            document.getElementById("trButt").style.display='none';
            showAll();
        }
    }

    function googleTranslateElementInit(stat)
    {
        if (stat != null)  {
            new google.translate.TranslateElement({pageLanguage: 'en',
                includedLanguages: 'sv,fi,da,no,nl,fr,de,el,ga,tr,es,is,pl,ja,it',
                layout: google.translate.TranslateElement.InlineLayout.SIMPLE
            }, 'google_translate_element');

            document.getElementById("trButt").style.visibility='hidden';
        }
    }

    function finish()
    {
        var ntpObj = document.getElementById("ntp");

        if (isValidIP(ntpObj) == false) {
            ntpObj.focus();
            return false;
        }

        if (document.getElementById("apmCheck").checked == true) {
            document.getElementById("apMode").value = "2";
        }

        if (document.getElementById("pfCheck").checked == true) {
            document.getElementById("pfMode").value = "1";
        }

        return true;
    }

    </script>

</head>

<body onload="init()">

<div class="content">

<div id="showDetailes"> <!-- show as tables -->

<table>
    <tr style="background-color: inherit;">
        <td style="width: 66%; border:none;">
            <h3 translate="no" id="h3header">x<!--#HNAME--> <!--#CURTM--></h3>
        </td>

        <td style="border:none">
            <span id="showAllspan">
                <input style="width: 32px;" title="Show system  properties" type="checkbox" onclick="showAll(this)">Show all
                <input style="width: 32px;" title="Show flow  dashboard" type="checkbox" onclick="showDash(this)">Show dashboard
            </span>
            <span id="showLessspan" style="display: none;">
                <input style="width: 32px;" title="Show system  properties" type="checkbox" onclick="showLess(this)">Show less
            </span>
        </td>

        <td style="border:none">
            <button id="trButt" type="button" onclick="googleTranslateElementInit(true)">Translate</button>
        </td>
    </tr>
</table>

<div id="google_translate_element"></div>
<!--#TRNS-->

<form name="form" id="form" method="post" onsubmit="return finish()" action="/index.html">
<input type="hidden" name="fage" id="fage" value="<!--#FAGE-->">
<input type="hidden" id="curepoch" value="<!--#EPOCH-->">
<input type="hidden" id="wifiscans" value="<!--#WSCAN-->">
<input type="hidden" id="cou" name="cou" value="<!--#COU-->">
<input type="hidden" name="apm" id="apMode" value="<!--#APM-->">
<input type="hidden" name="pfm" id="pfMode" value="<!--#PFM-->">
<input type="hidden" id="net_debug" value="<!--#NDBG-->">

<script>
    document.getElementById("form").onkeypress = function(e) {
        var key = e.charCode || e.keyCode || 0;     
        if (key == 13) {
            e.preventDefault();
        }
    } 
</script>

<table>
    <tr>
        <th class="theader">Properties</th>
        <th class="theader">Value</th>
        <th class="theader">Description</th>
    </tr>

    <tr>  
        <td class="system"><label for="ssid">SSID</label></td>
        <td class="system">
            <div class="input-group">
                <input type="text" title="Max 32 characters" pattern='[^!#;,].+[^+,\]/"]' required id="ssid" maxlength="32" name="ssid" value="<!--#SSID-->">
            </div>
            &nbsp;<select id="wifisel" title="scanned hosts" onchange="wifi_sel(this)">
                <option selected value="0">Select ssid</option>
            </select>
        </td>
        <td class="system">WiFi Network Name&sup1;</td>
    </tr>

    <tr>
        <td class="system"><label for="pass">Password</label></td>
        <td class="system">
            <div class="input-group">
                <input type="password" title="8-63 characters" required id="pass" name="pass" minlength="8" maxlength="63" value="<!--#PASS-->">
            </div>
            <input type="checkbox" style="width: 20px;" onclick="showPass()">Show Password
        </td>
        <td class="system">WiFi Password&sup1;</td>
    </tr>

    <tr>
        <td class="system"><label for="couopt">Country Code</label></td>
        <td class="system">
            <select  style="text-transform: lowercase; width: 51%;" name="couopt" id="couopt" title="CountryCode" onchange="upd_country(this)">
                <option value="22616">WORLDWIDE</option>
                <option value="21825">AUSTRALIA</option>
                <option value="21569">AUSTRIA</option>
                <option value="17730">BELGIUM</option>
                <option value="21058">BRAZIL</option>
                <option value="16707">CANADA</option>
                <option value="19523">CHILE</option>
                <option value="20035">CHINA</option>
                <option value="20291">COLOMBIA</option>
                <option value="23107">CZECH REPUBLIC</option>
                <option value="19268">DENMARK</option>
                <option value="17733">ESTONIA</option>
                <option value="18758">FINLAND</option>
                <option value="21062">FRANCE</option>
                <option value="17732">GERMANY</option>
                <option value="21063">GREECE</option>
                <option value="19272">HONG KONG</option>
                <option value="21832">HUNGARY</option>
                <option value="21321">ICELAND</option>
                <option value="20041">INDIA</option>
                <option value="19529">ISRAEL</option>
                <option value="21577">ITALY</option>
                <option value="20554">JAPAN</option>
                <option value="17739">KENYA</option>
                <option value="22092">LATVIA</option>
                <option value="18764">LIECHTENSTEIN</option>
                <option value="21580">LITHUANIA</option>
                <option value="21836">LUXEMBOURG</option>
                <option value="22861">MALAYSIA</option>
                <option value="21581">MALTA</option>
                <option value="22605">MEXICO</option>
                <option value="19534">NETHERLANDS</option>
                <option value="23118">NEW ZEALAND</option>
                <option value="18254">NIGERIA</option>
                <option value="20302">NORWAY</option>
                <option value="17744">PERU</option>
                <option value="18512">PHILIPPINES</option>
                <option value="19536">POLAND</option>
                <option value="21584">PORTUGAL</option>
                <option value="18259">SINGAPORE</option>
                <option value="19283">SLOVAKIA</option>
                <option value="18771">SLOVENIA</option>
                <option value="16730">SOUTH AFRICA</option>
                <option value="21067">SOUTH KOREA</option>
                <option value="21317">SPAIN</option>
                <option value="17747">SWEDEN</option>
                <option value="18499">SWITZERLAND</option>
                <option value="22356">TAIWAN</option>
                <option value="18516">THAILAND</option>
                <option value="21076">TURKEY</option>
                <option value="16967">UK</option>
                <option value="21333">USA</option>
            </select> 
        </td>
        <td class="system">WiFi Country code&sup1;</td>
    </tr>

    <tr>
        <td class="system"><label for="ntp">NTP Server</label></td>
        <td class="system">
            <div class="input-group">
                <input type="text" onmouseover="isValidIP(this)" id="ntp" name="ntp" minlength="1" maxlength="70" value="<!--#NTP-->">
            </div>
            &nbsp;<select name="ntpopt" id="ntpopt" title="NTP Server" onchange="upd_ntp(this)">
                <option selected value="0">Select new</option>
                <option value="0.0.0.0">AP</option>
                <option value="time.google.com">time.google.com</option>
                <option value="time.windows.com">time.windows.com</option>
                <option value="time.apple.com">time.apple.com</option>
            </select> 
        </td>
        <td class="system">0.0.0.0 = AP (NTP service of the Access Point)&sup1;</td>
    </tr>

    <tr>
        <td><label for="remv">Remaining Volume</label></td>
        <td><input type="text"  readonly title="In Litres" id="remv" value="0"></td>
        <td>Volume left to consume</td>
    </tr>

    <tr>
        <td><label for="totv">Volume used</label></td>
        <td><input type="number"  step="0.2" min="0" title="In Litres" id="totv" name="totv" oninput="validity.valid||(value='');" onchange="update_vols()" value="<!--#TOTV-->"></td>
        <td>Volume currently consumed</td>
    </tr>

    <tr>
        <td><label for="gtotv">Grand total Volume used</label></td>
        <td><input type="number"  min="0" title="In Litres" id="gtotv" name="gtotv" oninput="validity.valid||(value='');" value="<!--#GTOTV-->"></td>
        <td title="Adjust/Restore manually here" >Total volume consumed</td>
    </tr>

    <tr>
        <td><label for="tnkv">Tank Volume</label></td>
        <td><input type="number" min="1" title="In Litres" id="tnkv" name="tnkv" oninput="validity.valid||(value='');" onchange="update_vols()" value="<!--#TNKV-->"></td>
        <td>Water Tank capacity</td>
    </tr>

    <tr>
        <td class="tdsTr"><label>TDS Value</label></td>
        <td class="tdsTr">
            <div id="tdsDiv" translate="no"></div> <!-- inner-html updates -->
        </td>
        <td class="tdsTr" onmouseover="showKvalue('visible')" onmouseout="showKvalue('hidden')">
            <span id="thumbwrap"><a class="thumb"><span><img src="tds.png" alt=""></span>Water Quality</a></span>
            <input id="kvalue" name="kvalue" onchange="updKValue(this)" title="TDS K-value trim +/- 0.05 step range is 0.6-2.0" type="number" min="0.6" max="2.0" step="0.05" value="<!--#KVAL-->">
        </td>
    </tr>

    <tr>
        <td><label for="fqv">Q Value for Sensor</label></td>
        <td><input type="number" min="4" max="14" onchange="updQValue(this)" title="Float 4-14: 0.2 incr" id="fqv" name="fqv" step="0.2" oninput="validity.valid||(value='');" value="<!--#FQV-->"></td>
        <td title="See datasheet for sensor Q value">Q factor for the flow sensor</td>
    </tr>

   <tr>
        <td><label for="fdate">Filter Replace date</label></td>
        <td>
            <input type="date" onchange="setFdate(this)" id="fdate" name="fdate" value="">
        </td>
        <td>Expiration date for filter</td>
    </tr>

    <tr>
        <td><label for="fvol">Filter Volume</label></td>
        <td><input type="number" min="0" title="In Litres" id="fvol" name="fvol" oninput="validity.valid||(value='');" value="<!--#FVOL-->"></td>
        <td>Filter Volume since last replacement</td>
    </tr>

    <tr>
        <td class="system"><label for="vers">Firmware Version</label></td>
        <td class="system"><input type="text" style="background: lightgray" id="vers" readonly value="<!--#VERS-->"></td>
        <td class="system" onmouseover="showPf('visible')" onmouseout="showPf('hidden')">Version of this application
            <input title="Pico firmware upgrade mode on submit" type="checkbox" id="pfCheck">
        </td>
    </tr>
    <tr>
        <td class="system"><label for="ipad">I.P address</label></td>
        <td class="system"><input type="text" title="Device I.P" style="background: lightgray" id="ipad" readonly value="<!--#IPAD-->"></td>
        <td class="system">DHCP I.P address assigned for this device</td>
    </tr>
    <tr>
        <td class="system"><label for="ipagw">GW I.P address</label></td>
        <td class="system"><input type="text" title="Default gateway" style="background: lightgray" id="ipagw" readonly value="<!--#IPAGW-->"></td>
        <td class="system">DHCP Default gateway I.P assigned for this device</td>
    </tr>
    <tr>
        <td class="system"><label for="uptm">Uptime</label></td>
        <td class="system"><input type="text" title="Device uptime" style="background: lightgray" id="uptm" readonly value="<!--#UPTM-->"></td>
        <td class="system">Device uptime</td>
    </tr>
 
</table>
<br>
<input type="submit" class="buttons" id="submitButt" value="Submit" title="Save changes">
</form>

<div style="float: right; display: none;" id="apmDiv"><input type="checkbox" style="width: 20px;" id="apmCheck">Leave AP mode on submit&nbsp;&nbsp;&nbsp;</div>

<button type="button" class="buttons" title="Undo changes" onclick="location.reload(true)">Refresh</button>

&nbsp;&nbsp;&nbsp;
<a href="/panel.html?tvol=<!--#TNKV-->&tnkv=<!--#TOTV-->&fxd=<!--#FAGE-->&flv=<!--#FVOL-->&title=<!--#HNAME-->">About the Control Panel</a>

</div> <!-- show as tables -->

<div id="showGuages" style="scale: 0.9; width: max-content; visibility: hidden;">
    <table><tr style="background-color: inherit;">
        <td style="border: none; width: 85%;"><h3 translate="no" id="h3Guageheader">x</h3></td>
        <td  style="border: none"><input style="width: 32px;" title="Show as table" type="checkbox" onclick="showDefault(this)">Show detailes</td>
    </tr></table>

    <div id="containerFlrt"></div>
    <div id="containerTank"></div>
    <div id="containerTds"></div>
    <div id="containerTemp"></div>
</div>

<script>

    guageFlrt = new GaugeSVG({
	    id: "containerFlrt",
        value: 0,
	    valueColor: "#444488",
	    min: 0,
	    max: 10,
	    minmaxColor: "#444488",
	    title: "Flowrate",
	    titleColor: "#8888cc",
	    label: "L/M",
	    labelColor: "#8888cc",
	    gaugeWidthScale: 0.75,
	    gaugeBorderColor: "#222244",
	    gaugeBorderWidth: 1.5,
	    gaugeShadowColor: "#444488",
	    gaugeShadowScale: 1.35,
	    canvasBackColor: "#f2f2f2",
	    gaugeBackColor: "#ccccff",
	    needleColor: "#8888cc",
	    lowerActionLimit: -1,
	    lowerWarningLimit: -1,
	    upperWarningLimit: -1,
	    upperActionLimit: -1,
    });

   var guageTank = new GaugeSVG({
	    id: "containerTank", 
	    value: <!--#TNKV-->-<!--#TOTV-->,
	    valueColor: "#444488",
	    min: 0,
	    max: <!--#TNKV-->,
	    minmaxColor: "#444488",
	    title: "Tank",
	    titleColor: "#8888cc",
	    label: "liters",
	    labelColor: "#8888cc",
	    gaugeWidthScale: 0.75,
	    gaugeBorderColor: "#222244",
	    gaugeBorderWidth: 1.5,
	    gaugeShadowColor: "#444488",
	    gaugeShadowScale: 1.35,
	    canvasBackColor: "#f2f2f2",
	    gaugeBackColor: "#ccccff",
	    needleColor: "#8888cc",
	    lowerActionLimit: -1,
	    lowerWarningLimit: -1,
	    upperWarningLimit: -1,
	    upperActionLimit: -1,
    });
    
    var guageTds = new GaugeSVG({
	    id: "containerTds", 
	    value: <!--#TDS-->, 
	    title: "TDS",
	    label: "ppm",
	    gaugeWidthScale: 1.0,
	    min: 4.0,
	    max: 1000.0,
	    lowerWarningLimit: 30.0,
        upperWarningLimit: 400,
        upperActionLimit: 600,
	    needleColor: "#880088",
	    optimumRangeColor: "#88ff88",
	    warningRangeColor: "#f4f444",
        canvasBackColor: "#f2f2f2",
        gaugeBorderColor: "#222244",
        gaugeBorderWidth: 1.5,
	    actionRangeColor: "#ff8888"
    });
    
    var guageTemp = new GaugeSVG({
	    id: "containerTemp",
	    value: <!--#TEMP-->,
	    title: "Temp",
	    label: "℃",
	    gaugeWidthScale: 1.0,
	    min: 1.0,
	    max: 45.0,
	    lowerWarningLimit: 3.0,
        upperWarningLimit: 30,
	    needleColor: "#880088",
	    optimumRangeColor: "#88ff88",
	    warningRangeColor: "#f4f444",
        canvasBackColor: "#f2f2f2",
        gaugeBorderColor: "#222244",
        gaugeBorderWidth: 1.5,
	    actionRangeColor: "#ff8888"
    });

</script>

<p class="system"><br>&sup1; Reboot required.<br>
Changing any of the SSID, Password or Country Code parameters will result a lost connection the next time this device is
rebooted. You then have to regain the connection by joining your host to that new AP WiFi network.</p>

<script>
    document.getElementById("showGuages").style.display = 'none';
    TimerObj = setInterval(function () {loadXMLDoc();}, 2000);
</script>

</div> <!-- content -->
</body>
</html>


